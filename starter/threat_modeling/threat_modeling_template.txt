Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

1. Repudiation (Docker registry surface): This could happen when malicious images may be committed.
2. Spoofing (Docker client surface): The trafic between the Docker client and daemon or registry could be spoofed, as the client and daemon communicate using non encrypeted unix socket. (TLS can be implemented to secure the client)
2. Information Disclosure (Docker client surface): as the client could expose sesitive information configured insid the Dockerfile such as secrets that are hard coded in configuration files.
4. Elevation of Priviledge (Docker client surface): as the Dockerfile doesn't specify a user and running with root credential this affects the client authorization leading to abuse level of authorization.
5. Tampering (Docker host surface): This could affect daemon's configuration as a result of compromised client, and leads to misconfigruration of the Docker host. 

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

1. spoofing(control plance surface): As Api server handle all api calls to the server and it could be spoofed by malicious call which can be mitigated by ensuring that all calls to api server are over tls and avoiding anonymoust and basic authentication. 
2. Tampering(control plane surface): missing with etcd configurations could allow full control.Resticting permissions on etcd will mitigate this threat. 
3. Repudiation(worker node runtime surface): unauthorized changes could be made to kubelet. TLS authorization is required and avoid basi authorization. 
4. Information Disclosure( worker node runtime surface): This could happen when kube proxy exposes sensitive information and this can be avoided by setting 644 permission or less. 
5. Denial of service (worker node runtime surface): Kubelet is affected when too much traffic happens and kublet can't handle it. setting kernel defaults flag to true for kublet protection.

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).
The finding I worked on are 4.5 , 3.17 and 3.20

